package my_package;

public class Notes {
/*
                                             Modifiers (Модификаторы)
    Private            - доступ только внутри класса (наиболее рекомендуемый)
    (без модификатора) - только внутри пакета (по умолчанию)
    Protected          - межпакетный доступ только для подклассов
    Public             - межпакетный доступ (наименее рекомендуемый)
________________________________________________________________________________________________________________________

                                             Data Types (Типы Данных)

    byte    + назв 	       1 байт         -128.. 127
    short   + назв         2 байт         -32, 768.. 32, 767
    int     + назв         4 байт         -2, 147, 483, 648.. 2, 147, 483, 647
    long    + назв	       8 байт         -2⁶³l... 2⁶³ -1l
    float   + назв         4 байт         (с плавающей точкой)
    double  + назв         8 байт         (с плавающей точкой)
    char    + назв         2 байт         index
    boolean + назв         ? байт         true or false
________________________________________________________________________________________________________________________
                                             SPECIAL CHARACTERS
\t    тройной пробел

\b    удалить предыдущий символ

\n    новая строка

\\    простой слэш

\r    удаляет всё, что было написано до

\"    кавычки
________________________________________________________________________________________________________________________

                                             Operators (Операторы)
    Arith     -->   +,   -,   /,   %,   ++,   --               (Арифметические)
.                                             m += 7;  --->  m = m + 7;
.                                             m -= 7;  --->  m = m - 7;
.                                             m *= 7;  --->  m = m * 7;
.                                             m /= 7;  --->  m = m / 7;
.                                             m %= 7;  --->  m = m % 7
    Assign    -->   =,  +=,  -=,  =/,  =%                      (Назначающие)
    Compare   -->   >,  <,  >=,  <=,  ==,  !=                  (Сравнивающие)
    Logical   -->   !, && - "И" (false), || - "Или" (true)     (Логические)
________________________________________________________________________________________________________________________

                                             Statements (Заявления/утверждения)
    1.  if, else, else is
    2.  switch, case, break, default
________________________________________________________________________________________________________________________



                                         ~~~ Основные методы класса String ~~~
    concat():           объединяет только строку со строкой
    valueOf():          преобразует объект в строковый вид
    toString():         преобразует объект в строковый вид
    join():             соединяет строки с учетом разделителя
    compareTo():        сравнивает две строки
    charAt():           возвращает символ строки по индексу
    getChars():         возвращает группу символов
    equals():           сравнивает строки с учетом регистра
    equalsIgnoreCase(): сравнивает строки без учета регистра
    regionMatches():    сравнивает подстроки в строках
    indexOf():          находит индекс определенного символа
    lastIndexOf():      находит индекс последнего вхождения подстроки в строку
    startsWith():       определяет, начинается ли строка с подстроки
    endsWith():         определяет, заканчивается ли строка на определенную подстроку
    replace():          заменяет
    trim():             удаляет начальные и конечные пробелы
    substring():        возвращает подстроку, начиная с определенного индекса до конца или до определенного индекса
    toLowerCase():      переводит все символы строки в нижний регистр
    toUpperCase():      переводит все символы строки в верхний регистр
    isEmpty():          проверяет, пустая строка или нет

                                          ~~~ StringBuilder ~~~
    delete():           удаляет символы от и до указанных индексов
    deleteCharAt():     удаляет определённый символ под указанным индексом
    toString():         превращает изменяемый объект в не изменяемую строку
    reverse():          реверсирует строку
    insert():           вставляет
    append():           объединяет разные типы данных

.                                ~~~ Общие методы String и StringBuild ~~~
    concat():       charAt():     equals():     lastIndexOf():    substring():
    compareTo():    getChars():   indexOf():    replace():        isEmpty():

                                 ~~~Arrays Methods (Методы Массивов)~~~
    clear
    remove
    set
    binarySearch      (работает после метода sort())
________________________________________________________________________________________________________________________

                                             Создание методов
    static              зависимость метода от объекта
    void                метод, который ничего не возвращает
    return              метод, который возвращает что-то Определённое

.                                            Модификаторы Доступа
.                              Class       Package     Subclass      Global
    public                      ✅           ✅           ✅           ✅
    protected                   ✅           ✅           ✅           ❌
    'default'                   ✅           ✅           ❌           ❌
    private                     ✅           ❌           ❌           ❌
________________________________________________________________________________________________________________________
                                                  Для себя
    equals         -->   сравнивает по буковкам (значение)  в POOL   (String)
    ==             -->   сравнивает ссылку (местоположение) в HEAP   (new StringBuilder)
    [heap (pool)]  -->   Pool находится в Heap
    literal        -->   значение

    если ты собираешься вставлять (или удалять) в середину коллекции много элементов, то тебе лучше
    использовать LinkedList. Во всех остальных случаях – ArrayList.

                                             Сравнение Массивов
    a == b                  --> сравниваются адреса массивов
    a.equals(b)             --> сравниваются адреса массивов
    Arrays.equals(a, b)     --> сравнивается содержимое массивов
    Arrays.deepEquals(a, b) --> сравнивается содержимое многомерных массивов
________________________________________________________________________________________________________________________


                                             ||| T E R M I N O L O G Y |||
    CharSequence                  - последовательность символов
    optional cod                  - код, который необязателен
    redundant cod                 - код, который не нужен
    method chaining               - применение нескольких методов
    value                         - значение
    immutable                     - неизменяемый
    mutable                       - изменяемый
    wrapper classes               - классы обёртки
    перегрузка методов            - один и тот же метод но с разными параметрами (возвращаемые значения должны быть одинаковыми)
    Autoboxing                    - когда маленькое помещают в большое
    Unboxing                      - когда большое помещают в маленькое
    generic                       - объект с указанием типа данных (wrapper class)   <Integer>, <String>, ...
    non generic                   - объект без указания типа данных (wrapper class)

________________________________________________________________________________________________________________________
    HashSet            -->  unpredictable order (нерпедсказуемый порядкок) работает быстрее чем LinkedHashSet
    LinkedHashSet      -->  natural order (заданный порядок)               Работает быстреее чем TreeSet
    TreeSet            -->  sorted order (отсортированный порядок)         Работает медленнее из-за сортировки
              Не работают с Дубликатами                   в Set нет индексов
________________________________________________________________________________________________________________________
                                            OOP
    Инкапсуляция - операция, где приватные переменные (instance поля) делаются доступными при помощи getter и setter
________________________________________________________________________________________________________________________

*/
}
